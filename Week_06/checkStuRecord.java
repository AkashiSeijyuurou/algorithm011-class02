//给定一个正整数 n，返回长度为 n 的所有可被视为可奖励的出勤记录的数量。 答案可能非常大，你只需返回结果mod 109 + 7的值。 
//
// 学生出勤记录是只包含以下三个字符的字符串： 
//
// 
// 'A' : Absent，缺勤 
// 'L' : Late，迟到 
// 'P' : Present，到场 
// 
//
// 如果记录不包含多于一个'A'（缺勤）或超过两个连续的'L'（迟到），则该记录被视为可奖励的。 
//
// 示例 1: 
//
// 
//输入: n = 2
//输出: 8 
//解释：
//有8个长度为2的记录将被视为可奖励：
//"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL"
//只有"AA"不会被视为可奖励，因为缺勤次数超过一次。 
//
// 注意：n 的值不会超过100000。 
// Related Topics 动态规划 
// 👍 82 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    private final int MOD = 1000000007;
    public int checkRecord(int n) {
        //1.子问题：往后加上P,L,A,但是要注意L和A的个数
        //2.状态数组
        //六种状态
        //dp[i][0][0]  0A0L  没有一个A末尾没有一个L
        //dp[i][0][1]  0A1L
        //dp[i][1][2]  1A2L
        //dp[i][1][0]  1A0L
        //dp[i][1][1]  1A1L
        //dp[i][1][2]  1A2L
        //3.dp方程
        //+P
        //dp[i][0][0] = dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]
        //dp[i][1][0] = dp[i - 1][1][0] + dp[i - 1][1][1] + dp[i - 1][1][2]
        //+L
        //dp[i][0][1] = dp[i - 1][0][0]
        //dp[i][1][1] = dp[i - 1][1][0]
        //dp[i][0][2] = dp[i - 1][0][1]
        //dp[i][1][2] = dp[i - 1][1][1]
        //+A
        //dp[i][1][0] += dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][2]
        long[][][] dp = new long[n + 1][2][3];
        dp[1][0][0] = 1;
        dp[1][1][0] = 1;
        dp[1][0][1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i][0][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % MOD;
            dp[i][1][0] = (dp[i - 1][1][0] + dp[i - 1][1][1] + dp[i - 1][1][2]) % MOD;

            dp[i][0][1] = dp[i - 1][0][0];
            dp[i][0][2] = dp[i - 1][0][1];
            dp[i][1][1] = dp[i - 1][1][0];
            dp[i][1][2] = dp[i - 1][1][1];

            dp[i][1][0] += (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % MOD;
        }

        return (int)((dp[n][0][0] + dp[n][0][1] + dp[n][0][2] + dp[n][1][0] + dp[n][1][1] + dp[n][1][2]) % MOD);
    }
}

